name: Static

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  run-tests:
    name: Unit tests
    uses: ./.github/workflows/run-tests.yml
  static:
    name:  Deploy and release Pay product pages
    needs: run-tests
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Setup Ruby
        uses: ruby/setup-ruby@9669f3ee51dc3f4eda8447ab696b3ab19a90d14b
        with:
          ruby-version: '.ruby-version'
          bundler-cache: true
      - name: Setup Node
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: Setup Pages
        uses: actions/configure-pages@fc89b04e7d263ef510d9e77d3a1d088fb2688522
      - name: Get Package version
        id: get-package-version
        run: |
          echo "package_version=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
      - name: Get latest release version
        id: get-latest-release-version
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            try {
              const getReleaseResp = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              })
              return getReleaseResp.data.name
            } catch(err) {
              if (err.name == 'HttpError') {
                console.warn("Found HttpError")
                if (err.status == 404)  {
                  console.log("No previous GitHub Releases found. Defaulting to 0.0.0")
                  return "0.0.0"
                }
              } else {
                console.error(`Failed to get the latest release: ${err.message}`)
                throw err
              }
            }
      - name: Next release version
        id: next-version
        uses: alphagov/pay-ci/actions/next-semver@master
        with:
          package_version: ${{ steps.get-package-version.outputs.package_version }}
          release_version: ${{ steps.get-latest-release-version.outputs.result }}
      - name: Install and Build
        run: |
          npm ci
          bundle exec middleman build
          cat <<EOF > ./build/package.json
          {
            "name": "pay-product-page",
            "version": "${{ steps.next-version.outputs.version }}"
          }
          EOF
      - name: Set artifact name
        id: set-artifact-name
        run: echo "name=pay-product-page-${{ steps.next-version.outputs.version }}" >> $GITHUB_OUTPUT
      - name: Prepare archive for upload
        id: archive-assets
        shell: sh
        run: |
          chmod -c -R +rX "build"
          tar \
            --dereference --hard-dereference \
            --directory "build" \
            -cvf "${{ steps.set-artifact-name.outputs.name }}.tar" \
            .
      - name: Create Release
        id: create-release
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs')
            try {
              const releaseResponse = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: "${{ steps.next-version.outputs.version }}",
                name: "${{ steps.next-version.outputs.version }}"
              })
              const fileName = "${{ steps.set-artifact-name.outputs.name }}.tar"
              const releaseUploadResponse = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseResponse.data.id,
                name: fileName,
                data: fs.readFileSync(fileName)
              })
            } catch(err) {
              console.error(`Failed to create release: ${err.message}`)
              throw err
            }
      - name: Upload Pages artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: 'github-pages'
          path: ${{ steps.set-artifact-name.outputs.name }}.tar
          retention-days: 7
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@0243b6c10d06cb8e95ed8ee471231877621202c0
